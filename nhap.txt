#include <iostream>
#define IL_STD
#include <ilcplex/ilocplex.h>
#include <cmath>
#include <algorithm>
#include<fstream>
#include<vector>
#include <map>
using namespace std;
ILOSTLBEGIN

ifstream input("../input.txt");
ofstream output("../output.txt");


const int sizeOfMatrix = 10;

struct pos {
    int row;
    int col;
    pos (){

    }
    pos (int _r, int _c){
        row = _r;
        col = _c;
    }
};

//struct colorBlock {
//    pos coordinate[sizeOfMatrix-1];
//    colorBlock (){
//    }
//    void getFormFile(){
//        for (int i = 0; i < sizeOfMatrix - 1; i ++){
//            int r,c;
//            input >> r >> c;
//            pos tmp(r,c);
//            coordinate[i] = tmp;
//        }
//    }
//};

//struct solution {
//    int matrix[sizeOfMatrix][sizeOfMatrix];
//    solution(){
//    }
//};

enum typeOfSudoku {
    Classical = 1,
    Xsudoku,
    Windoku,
    Jigsaw,
    Killer,
};

//ILOLAZYCONSTRAINTCALLBACK2(SubtourEliminationCallback, IloArray <IloArray<IloNumVarArray>>, x, const int, sizeOfMatrix) {
//
//    IloEnv env = getEnv();
//
//    IloArray <IloArray<IloNumArray>> sol(env, sizeOfMatrix);
//    for (int i = 0; i < sizeOfMatrix; i++) {
//        sol[i] = IloArray<IloNumArray>(env, sizeOfMatrix);
//        for (int j = 0; j < sizeOfMatrix; j++) {
//            sol[i][j] = IloNumArray(env);
//            getValues(sol[i][j], x[i][j]);
//        }
//    }
//
//    for (int i = 1; i < sizeOfMatrix; i++) {
//        for (int j = 1; j < sizeOfMatrix; j++) {
//            for (int k = 1 ; k < sizeOfMatrix; k++) {
//                if (sol[i][j][k] == 1) cout << k << " ";
//            }
//        }
//        cout << endl;
//    }
//
//
//    //IloExpr t(env);
//    for (int i = 1; i < sizeOfMatrix; i++) {
//        for (int j = 1; j < sizeOfMatrix; j++) {
//            for (int k = 1; k < sizeOfMatrix; k++) {
//                if (i*j*k != 1) add((x[i][j][k]-sol[i][j][k]) != 0);
//
//            }
//
//        }
//    }
//    //add(t != 0);
//    return;
//}

int main() {
    //cout << Classical << " " << Xsudoku << " " << Windoku << " " << Jigsaw << " " << Killer;
    int type;
    input >> type;
    //map<solution,bool> check;

    switch (type) {
        case Classical: {
            int inputNum[sizeOfMatrix][sizeOfMatrix];
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    input >> inputNum[i][j];
                }
            }
            //cout << type << endl;
            vector<pos> block;
            for (int i = 1; i < sizeOfMatrix; i += 3) {
                for (int j = 1; j < sizeOfMatrix; j += 3) {
                    pos tmp(i, j);
                    block.push_back(tmp);
                }
            }

            IloEnv env;
            IloModel model(env);
            //Variable
            IloArray <IloArray<IloNumVarArray>> x(env);
            for (int i1 = 0; i1 < sizeOfMatrix; i1++) {
                IloArray <IloNumVarArray> x1(env);
                for (int i2 = 0; i2 < sizeOfMatrix; i2++) {
                    IloNumVarArray x2(env);
                    for (int i3 = 0; i3 < sizeOfMatrix; i3++) {
                        x2.add(IloNumVar(env, 0, 1, ILOINT));
                    }
                    x1.add(x2);
                }
                x.add(x1);
            }

            //(2)
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    if (inputNum[i][j] != 0) {
                        model.add(x[i][j][inputNum[i][j]] == 1);
                    }
                }
            }

            //(3)
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    IloExpr tmp(env);
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(4)
            for (int k = 1; k < sizeOfMatrix; k++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    IloExpr tmp(env);
                    for (int i = 1; i < sizeOfMatrix; i++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(5)
            for (int k = 1; k < sizeOfMatrix; k++) {
                for (int i = 1; i < sizeOfMatrix; i++) {
                    IloExpr tmp(env);
                    for (int j = 1; j < sizeOfMatrix; j++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(6)
            for (int y = 0; y < block.size(); y++) {
                for (int k = 1; k < sizeOfMatrix; k++) {
                    IloExpr tmp(env);
                    for (int i = block[y].row; i < block[y].row + 3; i++) {
                        for (int j = block[y].col; j < block[y].col + 3; j++) {
                            tmp += x[i][j][k];
                        }
                    }
                    model.add(tmp == 1);
                }
            }

            for (int i = 0; i < sizeOfMatrix; i++) {
                for (int j = 0; j < sizeOfMatrix; j++) {
                    for (int k = 0; k < sizeOfMatrix; k++) {
                        if (i * j * k == 0) model.add(x[i][j][k] == 0);
                    }
                }
            }

            IloExpr sum(env);
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        sum += 0 * x[i][j][k];
                    }
                }
            }

            model.add(IloMinimize(env, sum));
            IloCplex cplex(model);
            cplex.setParam(IloCplex::Param::TimeLimit, 30);
            //cplex.exportModel("/Users/hatnho0708/Library/Preferences/CLion2019.3/scratches/model.lp");
            //IloCplex::Callback sec = cplex.use(SubtourEliminationCallback(env, x, sizeOfMatrix));

            //sec.end();

            //cout << "Nodes: " << cplex.getNnodes() << endl;
            //cout << "Nodes left: " << cplex.getNnodesLeft() << endl;
            //cout << cplex.getStatus() << endl;
            //cout << "Gap: " << cplex.getMIPRelativeGap() << endl;

            if (cplex.solve()){
                IloArray <IloArray<IloNumArray>> sol(env, sizeOfMatrix);
                for (int i = 0; i < sizeOfMatrix; i++) {
                    sol[i] = IloArray<IloNumArray>(env, sizeOfMatrix);
                    for (int j = 0; j < sizeOfMatrix; j++) {
                        sol[i][j] = IloNumArray(env);
                        cplex.getValues(sol[i][j], x[i][j]);
                    }
                }

                for (int i = 1; i < sizeOfMatrix; i++) {
                    for (int j = 1; j < sizeOfMatrix; j++) {
                        for (int k = 1 ; k < sizeOfMatrix; k++) {
                            if (sol[i][j][k] == 1) cout << k << " ";
                        }
                    }
                    cout << endl;
                }
            }
            else cout << "-1" << endl;


//            while (cplex.getStatus() != 0){
//                for (int i = 1; i < sizeOfMatrix; i++) {
//                    for (int j = 1; j < sizeOfMatrix; j++) {
//                        for (int k = 1; k < sizeOfMatrix; k++) {
//                            if (i*j*k != 1) model.add((x[i][j][k]-sol[i][j][k]) != 0);
//
//                        }
//
//                    }
//                }
//
//                cout << cplex.getStatus() << endl;
//                model.add(x[1][2][4] == 0);
//                cplex.solve();
//                //sec.end();
//
//                cout << "Nodes: " << cplex.getNnodes() << endl;
//                cout << "Nodes left: " << cplex.getNnodesLeft() << endl;
//                //cout << cplex.getStatus();
//                cout << "Gap: " << cplex.getMIPRelativeGap() << endl;
//                IloArray <IloArray<IloNumArray>> sol(env, sizeOfMatrix);
//                for (int i = 0; i < sizeOfMatrix; i++) {
//                    sol[i] = IloArray<IloNumArray>(env, sizeOfMatrix);
//                    for (int j = 0; j < sizeOfMatrix; j++) {
//                        sol[i][j] = IloNumArray(env);
//                        cplex.getValues(sol[i][j], x[i][j]);
//                    }
//                }
//
//                for (int i = 1; i < sizeOfMatrix; i++) {
//                    for (int j = 1; j < sizeOfMatrix; j++) {
//                        for (int k = 1 ; k < sizeOfMatrix; k++) {
//                            if (sol[i][j][k] == 1) cout << k << " ";
//                        }
//                    }
//                    cout << endl;
//                }
//
//            }

            env.end();
            break;
        }

        case Xsudoku :
        {
            //cout << type << endl;
            int inputNum[sizeOfMatrix][sizeOfMatrix];
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    input >> inputNum[i][j];
                }
            }

            vector<pos> block;
            for (int i = 1; i < sizeOfMatrix; i += 3) {
                for (int j = 1; j < sizeOfMatrix; j += 3) {
                    pos tmp(i, j);
                    block.push_back(tmp);
                }
            }

            IloEnv env;
            IloModel model(env);
            //Variable
            IloArray <IloArray<IloNumVarArray>> x(env);
            for (int i1 = 0; i1 < sizeOfMatrix; i1++) {
                IloArray <IloNumVarArray> x1(env);
                for (int i2 = 0; i2 < sizeOfMatrix; i2++) {
                    IloNumVarArray x2(env);
                    for (int i3 = 0; i3 < sizeOfMatrix; i3++) {
                        x2.add(IloNumVar(env, 0, 1, ILOINT));
                    }
                    x1.add(x2);
                }
                x.add(x1);
            }

            //(2)
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    if (inputNum[i][j] != 0) {
                        model.add(x[i][j][inputNum[i][j]] == 1);
                    }
                }
            }

            //(3)
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    IloExpr tmp(env);
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(4)
            for (int k = 1; k < sizeOfMatrix; k++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    IloExpr tmp(env);
                    for (int i = 1; i < sizeOfMatrix; i++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(5)
            for (int k = 1; k < sizeOfMatrix; k++) {
                for (int i = 1; i < sizeOfMatrix; i++) {
                    IloExpr tmp(env);
                    for (int j = 1; j < sizeOfMatrix; j++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(6)
            for (int y = 0; y < block.size(); y++) {
                for (int k = 1; k < sizeOfMatrix; k++) {
                    IloExpr tmp(env);
                    for (int i = block[y].row; i < block[y].row + 3; i++) {
                        for (int j = block[y].col; j < block[y].col + 3; j++) {
                            tmp += x[i][j][k];
                        }
                    }
                    model.add(tmp == 1);
                }
            }

            //main diagonal
            for (int k = 1; k < sizeOfMatrix; k++) {
                IloExpr tmp(env);
                for (int i = 1; i < sizeOfMatrix; i++) {
                    for (int j = 1; j < sizeOfMatrix; j++) {
                        if (i == j) tmp += x[i][j][k];

                    }
                }
                model.add(tmp == 1);
            }

            //secondary diagonal
            for (int k = 1; k < sizeOfMatrix; k++) {
                IloExpr tmp(env);
                for (int i = 1; i < sizeOfMatrix; i++) {
                    for (int j = 1; j < sizeOfMatrix; j++) {
                        if (i + j == sizeOfMatrix) tmp += x[i][j][k];

                    }
                }
                model.add(tmp == 1);
            }


            for (int i = 0; i < sizeOfMatrix; i++) {
                for (int j = 0; j < sizeOfMatrix; j++) {
                    for (int k = 0; k < sizeOfMatrix; k++) {
                        if (i * j * k == 0) model.add(x[i][j][k] == 0);
                    }
                }
            }

            IloExpr sum(env);
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        sum += 0 * x[i][j][k];
                    }
                }
            }

            model.add(IloMinimize(env, sum));
            IloCplex cplex(model);
            cplex.setParam(IloCplex::Param::TimeLimit, 30);
            //cplex.exportModel("/Users/hatnho0708/Library/Preferences/CLion2019.3/scratches/model.lp");
            cplex.solve();

            cout << "Nodes: " << cplex.getNnodes() << endl;
            cout << "Nodes left: " << cplex.getNnodesLeft() << endl;
            cout << "Gap: " << cplex.getMIPRelativeGap() << endl;
            IloArray <IloArray<IloNumArray>> sol(env, sizeOfMatrix);
            for (int i = 0; i < sizeOfMatrix; i++) {
                sol[i] = IloArray<IloNumArray>(env, sizeOfMatrix);
                for (int j = 0; j < sizeOfMatrix; j++) {
                    sol[i][j] = IloNumArray(env);
                    cplex.getValues(sol[i][j], x[i][j]);
                }
            }

            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        if (sol[i][j][k] == 1) cout << k << " ";
                    }
                }
                cout << endl;
            }

            cout << cplex.getStatus();
            env.end();
            break;
        }

        case Windoku :
        {
            //cout << type << endl;
            int inputNum[sizeOfMatrix][sizeOfMatrix];
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    input >> inputNum[i][j];
                }
            }

            vector<pos> block;
            for (int i = 1; i < sizeOfMatrix; i += 3) {
                for (int j = 1; j < sizeOfMatrix; j += 3) {
                    pos tmp(i, j);
                    block.push_back(tmp);
                }
            }
            pos tmp1(2,2);
            pos tmp2(2,6);
            pos tmp3(6,2);
            pos tmp4(6,6);
            block.push_back(tmp1);
            block.push_back(tmp2);
            block.push_back(tmp3);
            block.push_back(tmp4);

            IloEnv env;
            IloModel model(env);
            //Variable
            IloArray <IloArray<IloNumVarArray>> x(env);
            for (int i1 = 0; i1 < sizeOfMatrix; i1++) {
                IloArray <IloNumVarArray> x1(env);
                for (int i2 = 0; i2 < sizeOfMatrix; i2++) {
                    IloNumVarArray x2(env);
                    for (int i3 = 0; i3 < sizeOfMatrix; i3++) {
                        x2.add(IloNumVar(env, 0, 1, ILOINT));
                    }
                    x1.add(x2);
                }
                x.add(x1);
            }

            //(2)
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    if (inputNum[i][j] != 0) {
                        model.add(x[i][j][inputNum[i][j]] == 1);
                    }
                }
            }

            //(3)
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    IloExpr tmp(env);
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(4)
            for (int k = 1; k < sizeOfMatrix; k++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    IloExpr tmp(env);
                    for (int i = 1; i < sizeOfMatrix; i++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(5)
            for (int k = 1; k < sizeOfMatrix; k++) {
                for (int i = 1; i < sizeOfMatrix; i++) {
                    IloExpr tmp(env);
                    for (int j = 1; j < sizeOfMatrix; j++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(6)
            for (int y = 0; y < block.size(); y++) {
                for (int k = 1; k < sizeOfMatrix; k++) {
                    IloExpr tmp(env);
                    for (int i = block[y].row; i < block[y].row + 3; i++) {
                        for (int j = block[y].col; j < block[y].col + 3; j++) {
                            tmp += x[i][j][k];
                        }
                    }
                    model.add(tmp == 1);
                }
            }

            for (int i = 0; i < sizeOfMatrix; i++) {
                for (int j = 0; j < sizeOfMatrix; j++) {
                    for (int k = 0; k < sizeOfMatrix; k++) {
                        if (i * j * k == 0) model.add(x[i][j][k] == 0);
                    }
                }
            }

            IloExpr sum(env);
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        sum += 0 * x[i][j][k];
                    }
                }
            }

            model.add(IloMinimize(env, sum));
            IloCplex cplex(model);
            cplex.setParam(IloCplex::Param::TimeLimit, 30);
            //cplex.exportModel("/Users/hatnho0708/Library/Preferences/CLion2019.3/scratches/model.lp");
            cplex.solve();

            cout << "Nodes: " << cplex.getNnodes() << endl;
            cout << "Nodes left: " << cplex.getNnodesLeft() << endl;
            cout << "Gap: " << cplex.getMIPRelativeGap() << endl;
            IloArray <IloArray<IloNumArray>> sol(env, sizeOfMatrix);
            for (int i = 0; i < sizeOfMatrix; i++) {
                sol[i] = IloArray<IloNumArray>(env, sizeOfMatrix);
                for (int j = 0; j < sizeOfMatrix; j++) {
                    sol[i][j] = IloNumArray(env);
                    cplex.getValues(sol[i][j], x[i][j]);
                }
            }

            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        if (sol[i][j][k] == 1) cout << k << " ";
                    }
                }
                cout << endl;
            }

            cout << cplex.getStatus();
            env.end();
            break;
        }

        case Jigsaw :
        {
            //cout << type << endl;
            int inputNum[sizeOfMatrix][sizeOfMatrix];
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    input >> inputNum[i][j];
                }
            }

//            for (int y = 0; y < sizeOfMatrix - 1; y++){
//                for (int k = 1; k < sizeOfMatrix; k++){
//                    for (int i = 0; i < sizeOfMatrix - 1; i++){
//                        cout << color[y].coordinate[i].row << " " << color[y].coordinate[i].col << " ";
//                    }
//                    cout << k << endl;
//                }
//            }

            IloEnv env;
            IloModel model(env);
            //Variable
            IloArray <IloArray<IloNumVarArray>> x(env);
            for (int i1 = 0; i1 < sizeOfMatrix; i1++) {
                IloArray <IloNumVarArray> x1(env);
                for (int i2 = 0; i2 < sizeOfMatrix; i2++) {
                    IloNumVarArray x2(env);
                    for (int i3 = 0; i3 < sizeOfMatrix; i3++) {
                        x2.add(IloNumVar(env, 0, 1, ILOINT));
                    }
                    x1.add(x2);
                }
                x.add(x1);
            }

            //(2)
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    if (inputNum[i][j] != 0) {
                        model.add(x[i][j][inputNum[i][j]] == 1);
                    }
                }
            }

            //(3)
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    IloExpr tmp(env);
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(4)
            for (int k = 1; k < sizeOfMatrix; k++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    IloExpr tmp(env);
                    for (int i = 1; i < sizeOfMatrix; i++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(5)
            for (int k = 1; k < sizeOfMatrix; k++) {
                for (int i = 1; i < sizeOfMatrix; i++) {
                    IloExpr tmp(env);
                    for (int j = 1; j < sizeOfMatrix; j++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //color block
            for (int m = 1; m < sizeOfMatrix; m++){
                vector<pos> block;
                for (int i = 1; i < sizeOfMatrix; i++) {
                    int r,c;
                    input >> r >> c;
                    pos tmp(r, c);
                    block.push_back(tmp);
                }

                for (int k = 1; k < sizeOfMatrix; k++) {
                    IloExpr tmp(env);
                    for (int y = 0; y < block.size(); y++){
                        tmp += x[block[y].row][block[y].col][k];
                    }
                    model.add(tmp == 1);
                }
            }

            for (int i = 0; i < sizeOfMatrix; i++) {
                for (int j = 0; j < sizeOfMatrix; j++) {
                    for (int k = 0; k < sizeOfMatrix; k++) {
                        if (i * j * k == 0) model.add(x[i][j][k] == 0);
                    }
                }
            }

            IloExpr sum(env);
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        sum += 0 * x[i][j][k];
                    }
                }
            }

            model.add(IloMinimize(env, sum));
            IloCplex cplex(model);
            cplex.setParam(IloCplex::Param::TimeLimit, 30);
            cplex.exportModel("/Users/hatnho0708/Library/Preferences/CLion2019.3/scratches/model.lp");
            cplex.solve();

            cout << "Nodes: " << cplex.getNnodes() << endl;
            cout << "Nodes left: " << cplex.getNnodesLeft() << endl;
            cout << "Gap: " << cplex.getMIPRelativeGap() << endl;
            IloArray <IloArray<IloNumArray>> sol(env, sizeOfMatrix);
            for (int i = 0; i < sizeOfMatrix; i++) {
                sol[i] = IloArray<IloNumArray>(env, sizeOfMatrix);
                for (int j = 0; j < sizeOfMatrix; j++) {
                    sol[i][j] = IloNumArray(env);
                    cplex.getValues(sol[i][j], x[i][j]);
                }
            }

            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        if (sol[i][j][k] == 1) cout << k << " ";
                    }
                }
                cout << endl;
            }

            cout << cplex.getStatus();
            env.end();
            break;
        }

        case Killer :
        {
            //cout << type << endl;
            vector<pos> block;
            for (int i = 1; i < sizeOfMatrix; i += 3) {
                for (int j = 1; j < sizeOfMatrix; j += 3) {
                    pos tmp(i, j);
                    block.push_back(tmp);
                }
            }

            IloEnv env;
            IloModel model(env);
            //Variable
            IloArray <IloArray<IloNumVarArray>> x(env);
            for (int i1 = 0; i1 < sizeOfMatrix; i1++) {
                IloArray <IloNumVarArray> x1(env);
                for (int i2 = 0; i2 < sizeOfMatrix; i2++) {
                    IloNumVarArray x2(env);
                    for (int i3 = 0; i3 < sizeOfMatrix; i3++) {
                        x2.add(IloNumVar(env, 0, 1, ILOINT));
                    }
                    x1.add(x2);
                }
                x.add(x1);
            }

            //(3)
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    IloExpr tmp(env);
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(4)
            for (int k = 1; k < sizeOfMatrix; k++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    IloExpr tmp(env);
                    for (int i = 1; i < sizeOfMatrix; i++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(5)
            for (int k = 1; k < sizeOfMatrix; k++) {
                for (int i = 1; i < sizeOfMatrix; i++) {
                    IloExpr tmp(env);
                    for (int j = 1; j < sizeOfMatrix; j++) {
                        tmp += x[i][j][k];

                    }
                    model.add(tmp == 1);
                }
            }

            //(6)
            for (int y = 0; y < block.size(); y++) {
                for (int k = 1; k < sizeOfMatrix; k++) {
                    IloExpr tmp(env);
                    for (int i = block[y].row; i < block[y].row + 3; i++) {
                        for (int j = block[y].col; j < block[y].col + 3; j++) {
                            tmp += x[i][j][k];
                        }
                    }
                    model.add(tmp == 1);
                }
            }

            //color block
            int numOfBlock;
            input >> numOfBlock;
            for (int num = 1; num <= numOfBlock; num++){
                int sumOfBlock;
                input >> sumOfBlock;
                int sizeOfBlock;
                input >> sizeOfBlock;
                vector<pos> block;
                for (int i = 1; i <= sizeOfBlock; i++) {
                    int r,c;
                    input >> r >> c;
                    pos tmp(r, c);
                    block.push_back(tmp);
                }

                IloExpr tmpSum(env);

                for (int k = 1; k < sizeOfMatrix; k++) {
                    IloExpr tmp(env);
                    for (int y = 0; y < block.size(); y++){
                        tmp += x[block[y].row][block[y].col][k];
                    }
                    tmpSum += k*tmp;
                }
                model.add(tmpSum == sumOfBlock);
            }

            for (int i = 0; i < sizeOfMatrix; i++) {
                for (int j = 0; j < sizeOfMatrix; j++) {
                    for (int k = 0; k < sizeOfMatrix; k++) {
                        if (i * j * k == 0) model.add(x[i][j][k] == 0);
                    }
                }
            }

            IloExpr sum(env);
            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        sum += 0 * x[i][j][k];
                    }
                }
            }

            model.add(IloMinimize(env, sum));
            IloCplex cplex(model);
            cplex.setParam(IloCplex::Param::TimeLimit, 30);
            //cplex.exportModel("/Users/hatnho0708/Library/Preferences/CLion2019.3/scratches/model.lp");
            cplex.solve();

            cout << "Nodes: " << cplex.getNnodes() << endl;
            cout << "Nodes left: " << cplex.getNnodesLeft() << endl;
            cout << "Gap: " << cplex.getMIPRelativeGap() << endl;
            IloArray <IloArray<IloNumArray>> sol(env, sizeOfMatrix);
            for (int i = 0; i < sizeOfMatrix; i++) {
                sol[i] = IloArray<IloNumArray>(env, sizeOfMatrix);
                for (int j = 0; j < sizeOfMatrix; j++) {
                    sol[i][j] = IloNumArray(env);
                    cplex.getValues(sol[i][j], x[i][j]);
                }
            }

            for (int i = 1; i < sizeOfMatrix; i++) {
                for (int j = 1; j < sizeOfMatrix; j++) {
                    for (int k = 1; k < sizeOfMatrix; k++) {
                        if (sol[i][j][k]) cout << k << " ";
                    }
                }
                cout << endl;
            }

            cout << cplex.getStatus();
            env.end();
            break;
        }

    }

    return 0;
}
